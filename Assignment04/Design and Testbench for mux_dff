// Code your design here

module mux_dff_loop (
    input wire clk,
    input wire i1,
    input wire s,
    output wire y
);

    wire dff_out;
    reg q = 0;  // Initialize to avoid X state

    // Multiplexer logic
    assign y = (s == 1'b0) ? dff_out : i1;

    // D Flip-Flop
    always @(posedge clk) begin
        q <= y;
    end

    assign dff_out = q;

endmodule
//Testbench code
`timescale 1ns / 1ps

module tb_mux_dff_loop;

    reg clk;
    reg i1;
    reg s;
    wire y;

    // Instantiate the design under test
    mux_dff_loop uut (
        .clk(clk),
        .i1(i1),
        .s(s),
        .y(y)
    );

    // Clock generation: toggle every 5ns (10ns period)
    always #5 clk = ~clk;

    initial begin
        // VSD waveform dump
        $dumpfile("mux_dff_loop.vcd"); // VCD file name
        $dumpvars(0, tb_mux_dff_loop); // Dump everything under this testbench

        // Initialize signals
        clk = 0;
        i1  = 0;
        s   = 0;

        // Display output
        $display("Time\t clk\ts\ti1\ty");
        $monitor("%0t\t %b\t%b\t%b\t%b", $time, clk, s, i1, y);

        // Test pattern
        #10 s = 1; i1 = 1;
        #10 s = 0;
        #10 s = 1; i1 = 0;
        #10 s = 0;
        #10 s = 1; i1 = 1;
        #10 s = 0;
        #20;

        $finish;
    end

endmodule
