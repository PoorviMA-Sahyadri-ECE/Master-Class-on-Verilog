
/ Code your design here
module half_adder (
    input A,
    input B,
    output SUM,
    output CARRY
);
    assign SUM = A ^ B;
    assign CARRY = A & B;
endmodule

module full_adder (
    input A,
    input B,
    input Cin,
    output SUM,
    output Cout
);
    wire sum1, carry1, carry2;

    half_adder HA1 (
        .A(A),
        .B(B),
        .SUM(sum1),
        .CARRY(carry1)
    );

    half_adder HA2 (
        .A(sum1),
        .B(Cin),
        .SUM(SUM),
        .CARRY(carry2)
    );

    assign Cout = carry1 | carry2;
endmodule

/TestBench Code
module tb_full_adder;
    reg A, B, Cin;
    wire SUM, Cout;

    full_adder uut (
        .A(A),
        .B(B),
        .Cin(Cin),
        .SUM(SUM),
        .Cout(Cout)
    );

    initial begin
        $dumpfile("dump.vcd");
        $dumpvars(0, tb_full_adder);
        $display("Time\tA B Cin | SUM Cout");
        $monitor("%0t\t%b %b  %b  |  %b    %b", $time, A, B, Cin, SUM, Cout);

        A = 0; B = 0; Cin = 0; #10;
        A = 0; B = 0; Cin = 1; #10;
        A = 0; B = 1; Cin = 0; #10;
        A = 0; B = 1; Cin = 1; #10;
        A = 1; B = 0; Cin = 0; #10;
        A = 1; B = 0; Cin = 1; #10;
        A = 1; B = 1; Cin = 0; #10;
        A = 1; B = 1; Cin = 1; #10;

        #100 $finish;
    end
endmodule

